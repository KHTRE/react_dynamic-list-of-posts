{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","api/posts.ts","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsList","props","postsList","setSelectedPostId","selectedPostId","handleOpenPost","event","currentTarget","name","className","map","post","userId","title","type","classNames","id","String","onClick","BASE_URL","getPostComments","postId","a","url","fetch","response","json","postComment","nameForComment","emailForComment","bodyForComment","data","email","body","method","headers","JSON","stringify","deleteComment","NewCommentForm","updateComments","useState","setNameForComment","setEmailForComment","setBodyForComment","handleAddComment","preventDefault","onSubmit","placeholder","value","onChange","target","getUserPosts","getPostDetails","PostDetails","setPost","comments","setComments","commentsVisible","setCommentsVisible","getPostDetailsFromServer","postDetailsFromServer","getCommentsFromServer","commentsFromServer","useEffect","toggleComments","deleteHandler","length","comment","App","posts","setPosts","selectedUserId","setSelectedUserId","getPostsFromServer","postsFromServer","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.072a3a53.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\nimport classNames from 'classnames';\n\ntype SetSelectedPostId = (postId: number) => void;\n\ntype Props = {\n  postsList: Post[];\n  selectedPostId: number;\n  setSelectedPostId: SetSelectedPostId;\n};\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const { postsList, setSelectedPostId, selectedPostId } = props;\n\n  const handleOpenPost = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setSelectedPostId(+event.currentTarget.name);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {postsList.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className={classNames(\n                'PostsList__button',\n                'button',\n                { 'PostsList__button--opened': selectedPostId === post.id },\n              )}\n              name={String(post.id)}\n              onClick={handleOpenPost}\n            >\n              Open\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const getPostComments = async (postId: number) => {\n  const url = `${BASE_URL}/comments?postId=${postId}`;\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const postComment = async (\n  postId: number,\n  nameForComment: string,\n  emailForComment: string,\n  bodyForComment: string,\n) => {\n  const data = {\n    postId,\n    name: nameForComment,\n    email: emailForComment,\n    body: bodyForComment,\n  };\n  const url = 'https://mate.academy/students-api/comments';\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  });\n\n  return response.json();\n};\n\nexport const deleteComment = async (postId: string) => {\n  const url = `https://mate.academy/students-api/comments/${postId}`;\n\n  await fetch(url, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { postComment } from '../../api/comments';\n\ntype UpdateComments = () => void;\n\ntype Props = {\n  postId: number;\n  updateComments: UpdateComments;\n};\n\nexport const NewCommentForm: React.FC<Props> = (props) => {\n  const { postId, updateComments } = props;\n  const [nameForComment, setNameForComment] = useState<string>('');\n  const [emailForComment, setEmailForComment] = useState<string>('');\n  const [bodyForComment, setBodyForComment] = useState<string>('');\n\n  const handleNameInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNameForComment(event.target.value);\n  };\n\n  const handleEmailInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmailForComment(event.target.value);\n  };\n\n  const handleBodyInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBodyForComment(event.target.value);\n  };\n\n  const handleAddComment = async (event: React.FormEvent) => {\n    event.preventDefault();\n    await postComment(\n      postId,\n      nameForComment,\n      emailForComment,\n      bodyForComment,\n    );\n    setNameForComment('');\n    setEmailForComment('');\n    setBodyForComment('');\n    updateComments();\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleAddComment}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={nameForComment}\n          onChange={handleNameInput}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={emailForComment}\n          onChange={handleEmailInput}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={bodyForComment}\n          onChange={handleBodyInput}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = async (userId = 0) => {\n  let url = `${BASE_URL}/posts`;\n\n  if (userId !== 0) {\n    url = `${BASE_URL}/posts?userId=${userId}`;\n  }\n\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const url = `${BASE_URL}/posts/${postId}`;\n  const response = await fetch(url);\n\n  return response.json();\n};\n","import React, { useState, useEffect } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, deleteComment } from '../../api/comments';\n\ntype Props = {\n  selectedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = (props) => {\n  const { selectedPostId } = props;\n  const [post, setPost] = useState<Post>();\n  const [comments, setComments] = useState<Comment[]>();\n  const [commentsVisible, setCommentsVisible] = useState(false);\n\n  const getPostDetailsFromServer = async () => {\n    const postDetailsFromServer = await getPostDetails(selectedPostId);\n\n    setPost(postDetailsFromServer);\n  };\n\n  const getCommentsFromServer = async () => {\n    const commentsFromServer = await getPostComments(selectedPostId);\n\n    setComments(commentsFromServer);\n  };\n\n  useEffect(() => {\n    getPostDetailsFromServer();\n    getCommentsFromServer();\n  }, [selectedPostId]);\n\n  const toggleComments = () => {\n    setCommentsVisible(!commentsVisible);\n  };\n\n  const getCommentsButton = () => {\n    if (comments && comments.length > 0) {\n      return (\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={toggleComments}\n        >\n          {!commentsVisible\n            ? `Show ${comments.length} comments`\n            : `Hide ${comments.length} comments`}\n        </button>\n      );\n    }\n\n    return (\n      <span>No comments found</span>\n    );\n  };\n\n  const deleteHandler = async (event: React.MouseEvent<HTMLButtonElement>) => {\n    await deleteComment(event.currentTarget.name);\n    await getCommentsFromServer();\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      {selectedPostId !== 0 ? (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{post && post.title}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            {getCommentsButton()}\n\n            <ul className=\"PostDetails__list\">\n              {comments && commentsVisible && comments.map(comment => (\n                <li className=\"PostDetails__list-item\" key={comment.id}>\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    name={String(comment.id)}\n                    onClick={deleteHandler}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm postId={selectedPostId} updateComments={getCommentsFromServer} />\n            </div>\n          </section>\n        </>\n      ) : (\n        <span>Please select a post to see details</span>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[] | []>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const getPostsFromServer = async () => {\n    const postsFromServer = await getUserPosts(selectedUserId);\n\n    setPosts(postsFromServer);\n  };\n\n  useEffect(() => {\n    getPostsFromServer();\n  }, [selectedUserId]);\n\n  const handleUserSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    if (+event.target.value !== selectedUserId) {\n      setSelectedUserId(+event.target.value);\n    }\n\n    setSelectedPostId(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"select\">\n          Select a user: &nbsp;\n          <select\n            className=\"App__user-selector\"\n            id=\"select\"\n            value={selectedUserId}\n            onChange={handleUserSelect}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            postsList={posts}\n            setSelectedPostId={setSelectedPostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails selectedPostId={selectedPostId} />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}